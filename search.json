[{"path":"https://linnykos.github.io/tiltedCCA/articles/simulation.html","id":"simulate-data","dir":"Articles","previous_headings":"","what":"Simulate data","title":"Tilted-CCA Simulation (3 cell types)","text":"first generate synthetic data. , generate 300 cells, 100 3 true cell types. modality 10 variables. Looking code , can see purposefully separate 3 cell types Modality 1, separate cell types 1 3 cell type 2 Modality 2.","code":"n_each <- 100 true_cluster <- rep(1:3, each = n_each) mat_1 <- do.call(rbind, lapply(1:3, function(i){   if(i == 1){     MASS::mvrnorm(n = n_each, mu = c(0,0,0), Sigma = diag(3))     } else if(i == 2) {     MASS::mvrnorm(n = n_each, mu = c(15,0,0), Sigma = diag(3))    } else {     MASS::mvrnorm(n = n_each, mu = c(0,15,0), Sigma = diag(3))    } }))  mat_2 <- do.call(rbind, lapply(1:3, function(i){   if(i %in% c(1,3)){     MASS::mvrnorm(n = n_each, mu = c(0,0,0), Sigma = diag(3))    } else {     MASS::mvrnorm(n = n_each, mu = c(6,6,0), Sigma = diag(3))    } }))  mat_1 <- scale(mat_1, center = T, scale = F) mat_2 <- scale(mat_2, center = T, scale = F) svd_1 <- svd(mat_1) svd_2 <- svd(mat_2)  p_1 <- 10; p_2 <- 10 svd_v_1 <- tiltedCCA::generate_random_orthogonal(p_1, 3) svd_v_2 <- tiltedCCA::generate_random_orthogonal(p_2, 3)  mat_1 <- tcrossprod(svd_1$u %*% diag(svd_1$d), svd_v_1) mat_2 <- tcrossprod(svd_2$u %*% diag(svd_2$d), svd_v_2)  rownames(mat_1) <- paste0(\"n\", 1:nrow(mat_1)) rownames(mat_2) <- paste0(\"n\", 1:nrow(mat_2)) colnames(mat_1) <- paste0(\"g\", 1:ncol(mat_1)) colnames(mat_2) <- paste0(\"p\", 1:ncol(mat_2))  mat_1[1:5,1:5] #>          g1        g2       g3         g4        g5 #> n1 1.819759 0.5368737 4.036763 -1.2147901 -1.821764 #> n2 1.331994 0.5332072 3.411838 -0.4156336 -2.566754 #> n3 1.579988 0.4680836 3.616605 -1.7683005 -2.005390 #> n4 1.148463 0.4606350 2.978134 -0.5841379 -2.350133 #> n5 1.762367 0.7059740 4.474579 -0.2665754 -3.241323 mat_2[1:5,1:5] #>             p1         p2         p3        p4         p5 #> n1 -0.45066829 -0.2783653  1.0852459 0.4720760 -0.9391990 #> n2 -0.27205972  0.5415940  0.5700232 1.0375929 -0.5041184 #> n3 -0.16369850  0.6491696  0.3264213 1.0037482 -0.3786571 #> n4 -0.46618987  0.1503648  1.0161462 0.8644918 -0.6804707 #> n5  0.05288093  1.0724721 -0.1822755 1.1622260 -0.1242831"},{"path":"https://linnykos.github.io/tiltedCCA/articles/simulation.html","id":"plot-the-data","dir":"Articles","previous_headings":"","what":"Plot the data","title":"Tilted-CCA Simulation (3 cell types)","text":"Since wish visualize , set colors use visualizations. now ready visualize data. First, plot data access true cell type labels. see clearly Modality 1 separates orange, purple, blue cells, Modality 2 separates orange blue cells (.e., cell types 1 3) purple cells (.e., cell type 2).  course, access cell type labels practice, simulated data, able visualize data .","code":"svd_func <- function(mat){   svd_res <- svd(mat)   sweep(svd_res$u[,1:2], MARGIN = 2, STATS = svd_res$d[1:2], FUN = \"*\") } plot_idx <- sample(1:nrow(mat_1)) orange_col <- rgb(235, 134, 47, maxColorValue = 255) purple_col <- rgb(122, 49, 126, maxColorValue = 255) blue_col <- rgb(129, 139, 191, maxColorValue = 255) col_vec <- c(orange_col, purple_col, blue_col) par(mfrow = c(1,2)) tmp <- svd_func(mat_1) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Modality 1\\n(With true labels)\",      xlab = \"PCA's dim. 1\", ylab = \"PCA's dim. 2\",      pch = 16, col = col_vec[true_cluster[plot_idx]], asp = T) tmp <- svd_func(mat_2) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Modality 2\\n(With true labels)\",      xlab = \"PCA's dim. 1\", ylab = \"PCA's dim. 2\",      pch = 16, col = col_vec[true_cluster[plot_idx]], asp = T) par(mfrow = c(1,2)) tmp <- svd_func(mat_1) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Modality 1\\n(What we see in pracitce)\",      xlab = \"PCA's dim. 1\", ylab = \"PCA's dim. 2\",      pch = 16, col = \"gray\", asp = T) tmp <- svd_func(mat_2) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Modality 2\\n(What we see in pracitce)\",      xlab = \"PCA's dim. 1\", ylab = \"PCA's dim. 2\",      pch = 16, col = \"gray\", asp = T)"},{"path":"https://linnykos.github.io/tiltedCCA/articles/simulation.html","id":"apply-tilted-cca","dir":"Articles","previous_headings":"","what":"Apply Tilted-CCA","title":"Tilted-CCA Simulation (3 cell types)","text":"simulation, deploy “hard clustering” variant Tilted-CCA. , based visualization data, can infer large separations cell types. Hence, like pass inferred clustering information Tilted-CCA aid estimation common distinct embeddings. can estimate (crudely, sufficient simulation) via K-means. Notice estimating clusterings (one modality) data, “cheating” (loosely speaking). plot estimated clusterings .  Now ready run standard functions Tilted-CCA. general, usage Tilted-CCA (even beyond simulation), use following sequence functions. Note: appropriate desirable use true_cluster (.e., “true” cell-type labels) using tiltedCCA::form_metacells general (simulation practice). large_clustering_1 large_clustering_2 intended inform Tilted-CCA clustering structure (.e., cells separated geometrically) modality. make two notes: general, biggest choices (user Tilted-CCA) : 1) whether use “hard clustering” variant Tilted-CCA (done , seen arguments tiltedCCA::form_metacells) , 2) latent_k num_neigh computing graph Laplacian bases target common shared-nearest-neighbor graph. former choice usually inferred visualizing data prior applying Tilted-CCA. latter choice requires finesse (show tutorials scRNA-seq data). sake simplicity tutorial, call tiltedCCA::tiltedCCA, set fix_tilt_perc = 0. initializes “tilt” common component (3 total) aligned Modality 2 (inferred visually). , tiltedCCA::fine_tuning optimizes tilt common components coordinate descent fashion. Lastly, can look objects stored inside multiSVD_obj.","code":"clustering_1 <- factor(stats::kmeans(mat_1, centers = 3)$cluster) clustering_2 <- factor(stats::kmeans(mat_2, centers = 2)$cluster)  par(mfrow = c(1,2)) tmp <- svd_func(mat_1) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Modality 1\\n(Estimated clustering)\",      xlab = \"PCA's dim. 1\", ylab = \"PCA's dim. 2\",      pch = 16, col = c(1:3)[clustering_1[plot_idx]], asp = T) tmp <- svd_func(mat_2) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Modality 2\\n(Estimated clustering)\",      xlab = \"PCA's dim. 1\", ylab = \"PCA's dim. 2\",      pch = 16, col = c(4:5)[clustering_2[plot_idx]], asp = T) set.seed(10) multiSVD_obj <- tiltedCCA::create_multiSVD(mat_1 = mat_1, mat_2 = mat_2,                                            dims_1 = 1:3, dims_2 = 1:3,                                            center_1 = F, center_2 = F,                                            normalize_row = F,                                            normalize_singular_value = F,                                            recenter_1 = F, recenter_2 = F,                                            rescale_1 = F, rescale_2 = F,                                            scale_1 = F, scale_2 = F) multiSVD_obj <- tiltedCCA::form_metacells(input_obj = multiSVD_obj,                                           large_clustering_1 = clustering_1,                                            large_clustering_2 = clustering_2,                                           num_metacells = NULL) multiSVD_obj <- tiltedCCA::compute_snns(input_obj = multiSVD_obj,                                         latent_k = 2,                                         num_neigh = 80,                                         bool_cosine = F,                                         bool_intersect = F,                                         min_deg = 0) multiSVD_obj <- tiltedCCA::tiltedCCA(input_obj = multiSVD_obj,                                      fix_tilt_perc = 0) multiSVD_obj <- tiltedCCA::fine_tuning(input_obj = multiSVD_obj,                                        verbose = 0) multiSVD_obj <- tiltedCCA::tiltedCCA_decomposition(multiSVD_obj) names(multiSVD_obj) #>  [1] \"svd_1\"          \"svd_2\"          \"default_assay\"  \"param\"          #>  [5] \"metacell_obj\"   \"snn_list\"       \"laplacian_list\" \"cca_obj\"        #>  [9] \"tcca_obj\"       \"common_mat_1\"   \"distinct_mat_1\" \"common_mat_2\"   #> [13] \"distinct_mat_2\""},{"path":"https://linnykos.github.io/tiltedCCA/articles/simulation.html","id":"plot-tilted-ccas-result","dir":"Articles","previous_headings":"","what":"Plot Tilted-CCA’s result","title":"Tilted-CCA Simulation (3 cell types)","text":"can visualize common embedding. overlay true cell type labels onto plots interpretability, notice true_cluster never used actual usage Tilted-CCA. can see , desired, common embedding separates orange blue cells purple cells. cell type separations ones supported modalities. contrast, Modality 1 shows separation orange blue cells, separation orange blue cells reflected common embedding.  can also plot distinct embeddings (one Modality 1 Modality 2). see Modality 1’s distinct embedding shows separation orange blue cells (absent common embedding). contrast, Modality 2’s distinct embedding clusters three cell types together cell separation structure Modality 2 already reflected common embedding.","code":"tmp <- svd_func(multiSVD_obj$tcca_obj$common_score) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Common embedding\",      xlab = \"Common's dim. 1\", ylab = \"Common's dim. 2\",      pch = 16, col = col_vec[true_cluster[plot_idx]], asp = T) par(mfrow = c(1,2)) tmp <- svd_func(multiSVD_obj$tcca_obj$distinct_score_1) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Modality 1's distinct embed.\",      xlab = \"Distinct-1's dim. 1\", ylab = \"Distinct-1's dim. 2\",      pch = 16, col = col_vec[true_cluster[plot_idx]], asp = T) tmp <- svd_func(multiSVD_obj$tcca_obj$distinct_score_2) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Modality 2's distinct embed.\",      xlab = \"Distinct-2's dim. 1\", ylab = \"Distinct-2's dim. 2\",      pch = 16, col = col_vec[true_cluster[plot_idx]], asp = T)"},{"path":"https://linnykos.github.io/tiltedCCA/articles/simulation.html","id":"for-comparison-plot-consensus-pca","dir":"Articles","previous_headings":"","what":"For comparison, plot Consensus PCA","title":"Tilted-CCA Simulation (3 cell types)","text":"Finally, comparison, can show Consensus PCA combines information modalities. stark contrast Tilted-CCA, Consensus PCA combines information modalities. Hence, resulting embedding shows clear separation among three cell types. deem Consensus PCA method captures “union information,” Tilted-CCA’s embedding method captures “intersection information.”","code":"set.seed(10) consensus_pca <- tiltedCCA:::consensus_pca(mat_1 = mat_1, mat_2 = mat_2,                                            dims_1 = 1:2, dims_2 = 1:2,                                            dims_consensus = 1:2,                                            apply_pca = T,                                            center_1 = F, center_2 = F,                                            center_consensus = F,                                            recenter_1 = F, recenter_2 = F,                                            rescale_1 = F, rescale_2 = F,                                            scale_1 = F, scale_2 = F,                                            scale_consensus = F,                                            verbose = 0)  tmp <- svd_func(consensus_pca$dimred_consensus) plot(tmp[plot_idx,1], tmp[plot_idx,2],      main = \"Consensus PCA embedding\",      xlab = \"Consensus PCA's dim. 1\", ylab = \"Consensus PCA's dim. 2\",      pch = 16, col = col_vec[true_cluster[plot_idx]], asp = T)"},{"path":"https://linnykos.github.io/tiltedCCA/articles/tiltedCCA.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Tilted-CCA Simulation (3 cell types)","text":"simulations meant portable, toy-examples Tilted-CCA, intent demonstrate installation Tilted-CCA successful well demonstrate differs methods seek find “union information”. successful installation tiltedCCA required . See last section README system/package dependencies used creating simulations. simulations complete less 2 minutes.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/articles/tiltedCCA.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Tilted-CCA Simulation (3 cell types)","text":"Broadly speaking, Tilted-CCA pipeline 6 different function calls. procedure starts assuming two data matrices, mat_1 mat_2, (either matrix dgCMatrix) number rows (.e., cells), possibly different features. advise making sure row/column either matrix non-zero variance prior using pipeline. Step 1 (Initializing low-rank representation modality, create_multiSVD): compute leading PCs modality . can different number latent dimensions modality. , additional parameters dictate compute leading PCs (example, features scaled/center computing PCs? PCs used downstream? useful since ATAC data, common use first leading PC.) typically looks like following. output step multiSVD object, continually updated feed input get updated object following function calls. currently elements svd_1, svd_2, default_assay, param. Step 2 (Passing helping information, form_metacells): pass (optional) large clustering structure meta-cells . former designed help aid Tilted-CCA assess “intersection information” , latter designed handling large datasets 10,000 cells. large structuring structure needed, practitioner can simply pass large_clustering_1=NULL large_clustering_2=NULL. meta-cells needed, practitioner can simply pass num_metacells=NULL. typically looks like following. updated multiSVD object now additional element: metacell_obj. Step 3 (Creating shared nearest neighbor (SNN) graphs, compute_snns): compute SNN graphs modalities target common manifold (computed based modality’s SNN graph). graphs dictate Tilted-CCA represents information modality, node graph represents cell/meta-cell. , additional parameters dictate specific details graphs constructed. two important parameters latent_k (.e., dimensionality graph Laplacian eigenbases, used optimizing tilt) num_neigh (.e., number neighbors cell either modality). typically looks like following. updated multiSVD object now additional elements: snn_list laplacian_list. Step 4 (Initializing Tilted-CCA, tiltedCCA): compute CCA modalities initialize tilt across latent dimensions particular value. Recall CCA’s solution can directly computed using PC’s modality. different number latent dimensions modality, Tilted-CCA latent dimensionality (.e., via CCA) equal smaller two. updated multiSVD object now additional elements: cca_obj tcca_obj. Step 5 (Tuning tilt across latent dimension, fine_tuning): tune tilt across latent dimension. main computational bottleneck Tilted-CCA, optimization performed cyclically (.e., tilt latent dimension updated sequence, epochs cycling latent dimensions). new obvious element added multiSVD, representation common distinct embeddings updated upon function’s completion. example, multiSVD_obj$tcca_obj$tilt_perc now vector, denoting tilt common vector latent dimension. Step 6 (Completing decomposition, tiltedCCA_decomposition): Given tilts common vectors across latent dimensions, now recover full cell--feature decomposition modality. , additional parameters dictate whether want decompositions cell--feature cell--PC. latter desirable especially analyzing ATAC data, cell--feature dense matrix many hundred--thousand features (memory intensive). updated multiSVD object now additional elements: common_mat_1 distint_mat_1 (common_dimred_1 distinct_dimred_1 bool_modality_1_full=F) common_mat_2 distint_mat_2 (common_dimred_2 distinct_dimred_2 bool_modality_2_full=F)","code":"multiSVD_obj <- tiltedCCA::create_multiSVD(mat_1 = mat_1, mat_2 = mat_2,                                             dims_1 = 1:2, dims_2 = 1:2,                                             center_1 = F, center_2 = F,                                             normalize_row = T,                                             normalize_singular_value = F,                                             recenter_1 = F, recenter_2 = F,                                             rescale_1 = F, rescale_2 = F,                                             scale_1 = F, scale_2 = F) multiSVD_obj <- tiltedCCA::form_metacells(input_obj = multiSVD_obj,                                            large_clustering_1 = clustering_1,                                             large_clustering_2 = clustering_2,                                            num_metacells = NULL) multiSVD_obj <- tiltedCCA::compute_snns(input_obj = multiSVD_obj,                                          latent_k = 2,                                          num_neigh = 10,                                          bool_cosine = T,                                          bool_intersect = T,                                          min_deg = 1) multiSVD_obj <- tiltedCCA::tiltedCCA(input_obj = multiSVD_obj) multiSVD_obj <- tiltedCCA::fine_tuning(input_obj = multiSVD_obj) multiSVD_obj <- tiltedCCA::tiltedCCA_decomposition(multiSVD_obj)"},{"path":"https://linnykos.github.io/tiltedCCA/articles/tiltedCCA.html","id":"simulation-1-modality-1-separates-cells-into-3-clusters-and-modality-2-does-not","dir":"Articles","previous_headings":"Overview","what":"Simulation 1: Modality 1 separates cells into 3 clusters, and Modality 2 does not","title":"Tilted-CCA Simulation (3 cell types)","text":"See https://github.com/linnykos/tiltedCCA_analysis/blob/master/simulation/simulation_1.R simulation. simulation, 300 cells across two modalities 10 features . Modality 1 “high” amount distinct information – separates 300 cells 3 obvious clusters. Modality 2 “low” amount distinct information – 300 cells one amorphous ball. following shows modality based leading 2 PCs respectively, cells colored true cell-types. simulation1_data following shows Tilted-CCA’s common (.e., shared axes variation modalities) distinct (.e., axes variation unique modality, common axes accounted ) axes variation, cells colored true cell-types. , observe common embedding really contain information separate cell-types – desirable, cell-type separation information unique Modality 1 (hence, appearing Modality 1’s distinct embedding). common embedding demonstrates “intersection information.” simulation1_tcca contrast Tilted-CCA’s “intersection information,” demonstrate Consensus PCA, prototypical method illustrating “union information” low-dimensional embedding constructed multimodal data combining leading axes variation modality. embeddings useful visualize “best worlds” (.e., cell-type separation best combines modalities), useful understand shared distinct signals two modalities. , observe three cell-types clearly separated Consensus PCA. simulation1_consensuspca","code":""},{"path":"https://linnykos.github.io/tiltedCCA/articles/tiltedCCA.html","id":"simulation-2-both-modalities-separate-the-5-cell-types-into-3-clusters-in-different-ways","dir":"Articles","previous_headings":"Overview","what":"Simulation 2: Both modalities separate the 5 cell-types into 3 clusters in different ways","title":"Tilted-CCA Simulation (3 cell types)","text":"See https://github.com/linnykos/tiltedCCA_analysis/blob/master/simulation/simulation_2.R simulation. simulation, 500 cells across two modalities 10 features . 5 true cell-types, modality can differentiate cell-types 3 clusters. Modality 1 separates cyan cells red+black cells green+blue cells, Modality 2 separates cyan cells red+blue cells green+black cells. following shows modality based leading 2 PCs respectively, cells colored true cell-types. simulation2_data following shows Tilted-CCA’s common (demonstrating “intersection information”) distinct axes variation, cells colored true cell-types. , observe common embedding shows information modalities agree upon – cyan cells separable cell-types. distinct information illustrates distinct modality: Modality 1 separates cyan cells red+black cells green+blue cells, Modality 2 separates cyan cells red+blue cells green+black cells. simulation2_tcca Consensus PCA data cleanly separates five cell-types. , quantifying “union information” useful complementary perspective Tilted-CCA . “union” gives perspective axes variation contained across modalities, Tilted-CCA’s common embeddings gives perspective axes variation shared modalities. simulation2_consensuspca","code":""},{"path":"https://linnykos.github.io/tiltedCCA/articles/tiltedCCA.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Tilted-CCA Simulation (3 cell types)","text":"following shows suggested package versions developer (GitHub username: linnykos) used developing Tilted-CCA package.","code":"> devtools::session_info() ─ Session info ─────────────────────────────────────────────────────  setting  value  version  R version 4.1.2 (2021-11-01)  os       Red Hat Enterprise Linux  system   x86_64, linux-gnu  ui       X11  language (EN)  collate  en_US.UTF-8  ctype    en_US.UTF-8  tz       America/New_York  date     2022-10-04  pandoc   1.12.3.1 @ /usr/bin/pandoc  ─ Packages ────────────────────────  package           * version   date (UTC) lib source  cachem        1.0.6      2021-08-19 [1] CRAN (R 4.1.2)  callr         3.7.1      2022-07-13 [1] CRAN (R 4.1.2)  cli           3.3.0      2022-04-25 [1] CRAN (R 4.1.2)  crayon        1.5.1      2022-03-26 [1] CRAN (R 4.1.2)  devtools      2.4.4      2022-07-20 [1] CRAN (R 4.1.2)  digest        0.6.29     2021-12-01 [1] CRAN (R 4.1.2)  ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.1.2)  fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.1.2)  fs            1.5.2      2021-12-08 [1] CRAN (R 4.1.2)  glue          1.6.2      2022-02-24 [1] CRAN (R 4.1.2)  htmltools     0.5.3      2022-07-18 [1] CRAN (R 4.1.2)  htmlwidgets   1.5.4      2021-09-08 [1] CRAN (R 4.1.2)  httpuv        1.6.5      2022-01-05 [1] CRAN (R 4.1.2)  later         1.3.0      2021-08-18 [1] CRAN (R 4.1.2)  lifecycle     1.0.1      2021-09-24 [1] CRAN (R 4.1.2)  magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.1.2)  memoise       2.0.1      2021-11-26 [1] CRAN (R 4.1.2)  mime          0.12       2021-09-28 [1] CRAN (R 4.1.2)  miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.1.2)  pkgbuild      1.3.1      2021-12-20 [1] CRAN (R 4.1.2)  pkgload       1.3.0      2022-06-27 [1] CRAN (R 4.1.2)  prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.1.2)  processx      3.7.0      2022-07-07 [1] CRAN (R 4.1.2)  profvis       0.3.7      2020-11-02 [1] CRAN (R 4.1.2)  promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.1.2)  ps            1.7.0      2022-04-23 [1] CRAN (R 4.1.2)  purrr         0.3.4      2020-04-17 [1] CRAN (R 4.1.2)  R6            2.5.1      2021-08-19 [1] CRAN (R 4.1.2)  Rcpp          1.0.9      2022-07-08 [1] CRAN (R 4.1.2)  remotes       2.4.2      2021-11-30 [1] CRAN (R 4.1.2)  rlang         1.0.4      2022-07-12 [1] CRAN (R 4.1.2)  sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.1.2)  shiny         1.7.2      2022-07-19 [1] CRAN (R 4.1.2)  stringi       1.7.8      2022-07-11 [1] CRAN (R 4.1.2)  stringr       1.4.0      2019-02-10 [1] CRAN (R 4.1.2)  tiltedCCA   * 1.0.0.001  2022-09-06 [1] local  urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.1.2)  usethis       2.1.6      2022-05-25 [1] CRAN (R 4.1.2)  xtable        1.8-4      2019-04-21 [1] CRAN (R 4.1.2)"},{"path":"https://linnykos.github.io/tiltedCCA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Z Lin. Author, maintainer.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lin, Kevin Z., Zhang, Nancy R. (2023). Quantifying common distinct information single-cell multimodal data Tilted Canonical Correlation Analysis. Proceedings National Academy Sciences, 120(32),e2303647120","code":"@Article{,   title = {Quantifying common and distinct information in single-cell multimodal data with Tilted Canonical Correlation Analysis},   author = {Kevin Z Lin and Nancy R Zhang},   journal = {Proceedings of the National Academy of Sciences},   year = {2023},   volume = {120},   number = {32},   pages = {e2303647120},   doi = {10.1073/pnas.2303647120}, }"},{"path":"https://linnykos.github.io/tiltedCCA/index.html","id":"purpose","dir":"","previous_headings":"","what":"Tilted CCA","title":"Tilted CCA","text":"repository contains functions perform Tilted-CCA (version 1.0.0.001 October 4, 2022) downstream analysis, paper “Quantifying common distinct information single-cell multimodal data Tilted-CCA”. See companion GitHub package https://github.com/linnykos/tiltedCCA_analysis analyses performed paper. code developed tested primarily R 4.1.2. Macbook (macOS 11.6.8 Big Sur) equipped i7 processor.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tilted CCA","text":"package can installed devtools R. package depends several packages. include dbscan, ggplot2, ggrepel, irlba, MASS, Matrix, quadprog, RANN, RColorBrewer, RSpectra, scales, Seurat, SeuratObject, sparseMatrixStats. See last section README see (.e., CRAN, Bioconductor, GitHub) download packages. installation dependencies, installation tiltedCCA package fast (less 2 minutes).","code":"library(\"devtools\") devtools::install_github(\"linnykos/tiltedCCA\")"},{"path":"https://linnykos.github.io/tiltedCCA/index.html","id":"small-simulated-dataset-to-demo-the-software","dir":"","previous_headings":"","what":"Small simulated dataset to demo the software","title":"Tilted CCA","text":"See https://github.com/linnykos/tiltedCCA_analysis/tree/master/simulation small demo use Tilted-CCA.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Tilted CCA","text":"following shows suggested package versions developer (GitHub username: linnykos) used developing Tilted-CCA package.","code":"> devtools::session_info() ─ Session info ─────────────────────────────────────────────────────  setting  value  version  R version 4.1.2 (2021-11-01)  os       Red Hat Enterprise Linux  system   x86_64, linux-gnu  ui       X11  language (EN)  collate  en_US.UTF-8  ctype    en_US.UTF-8  tz       America/New_York  date     2022-10-04  pandoc   1.12.3.1 @ /usr/bin/pandoc  ─ Packages ─────────────────────────────────────────────────────────  package           * version    date (UTC) lib source  abind               1.4-5      2016-07-21 [1] CRAN (R 4.1.2)  assertthat          0.2.1      2019-03-21 [1] CRAN (R 4.1.2)  brio                1.1.3      2021-11-30 [1] CRAN (R 4.1.2)  cachem              1.0.6      2021-08-19 [1] CRAN (R 4.1.2)  callr               3.7.1      2022-07-13 [1] CRAN (R 4.1.2)  cli                 3.3.0      2022-04-25 [1] CRAN (R 4.1.2)  cluster             2.1.2      2021-04-17 [2] CRAN (R 4.1.2)  codetools           0.2-18     2020-11-04 [2] CRAN (R 4.1.2)  colorspace          2.0-3      2022-02-21 [1] CRAN (R 4.1.2)  cowplot             1.1.1      2020-12-30 [1] CRAN (R 4.1.2)  crayon              1.5.1      2022-03-26 [1] CRAN (R 4.1.2)  data.table          1.14.2     2021-09-27 [1] CRAN (R 4.1.2)  DBI                 1.1.3      2022-06-18 [1] CRAN (R 4.1.2)  dbscan            * 1.1-10     2022-01-15 [1] CRAN (R 4.1.2)  deldir              1.0-6      2021-10-23 [1] CRAN (R 4.1.2)  devtools            2.4.4      2022-07-20 [1] CRAN (R 4.1.2)  digest              0.6.29     2021-12-01 [1] CRAN (R 4.1.2)  dplyr               1.0.9      2022-04-28 [1] CRAN (R 4.1.2)  ellipsis            0.3.2      2021-04-29 [1] CRAN (R 4.1.2)  fansi               1.0.3      2022-03-24 [1] CRAN (R 4.1.2)  fastmap             1.1.0      2021-01-25 [1] CRAN (R 4.1.2)  fitdistrplus        1.1-8      2022-03-10 [1] CRAN (R 4.1.2)  fs                  1.5.2      2021-12-08 [1] CRAN (R 4.1.2)  future              1.27.0     2022-07-22 [1] CRAN (R 4.1.2)  future.apply        1.9.0      2022-04-25 [1] CRAN (R 4.1.2)  generics            0.1.3      2022-07-05 [1] CRAN (R 4.1.2)  ggplot2           * 3.3.6      2022-05-03 [1] CRAN (R 4.1.2)  ggrepel           * 0.9.1      2021-01-15 [1] CRAN (R 4.1.2)  ggridges            0.5.3      2021-01-08 [1] CRAN (R 4.1.2)  globals             0.16.0     2022-08-05 [1] CRAN (R 4.1.2)  glue                1.6.2      2022-02-24 [1] CRAN (R 4.1.2)  goftest             1.2-3      2021-10-07 [1] CRAN (R 4.1.2)  gridExtra           2.3        2017-09-09 [1] CRAN (R 4.1.2)  gtable              0.3.0      2019-03-25 [1] CRAN (R 4.1.2)  htmltools           0.5.3      2022-07-18 [1] CRAN (R 4.1.2)  htmlwidgets         1.5.4      2021-09-08 [1] CRAN (R 4.1.2)  httpuv              1.6.5      2022-01-05 [1] CRAN (R 4.1.2)  httr                1.4.3      2022-05-04 [1] CRAN (R 4.1.2)  ica                 1.0-3      2022-07-08 [1] CRAN (R 4.1.2)  igraph              1.3.4      2022-07-19 [1] CRAN (R 4.1.2)  irlba             * 2.3.5      2021-12-06 [1] CRAN (R 4.1.2)  jsonlite            1.8.0      2022-02-22 [1] CRAN (R 4.1.2)  KernSmooth          2.23-20    2021-05-03 [2] CRAN (R 4.1.2)  later               1.3.0      2021-08-18 [1] CRAN (R 4.1.2)  lattice             0.20-45    2021-09-22 [2] CRAN (R 4.1.2)  lazyeval            0.2.2      2019-03-15 [1] CRAN (R 4.1.2)  leiden              0.4.2      2022-05-09 [1] CRAN (R 4.1.2)  lifecycle           1.0.1      2021-09-24 [1] CRAN (R 4.1.2)  listenv             0.8.0      2019-12-05 [1] CRAN (R 4.1.2)  lmtest              0.9-40     2022-03-21 [1] CRAN (R 4.1.2)  magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.1.2)  MASS              * 7.3-54     2021-05-03 [2] CRAN (R 4.1.2)  Matrix            * 1.3-4      2021-06-01 [2] CRAN (R 4.1.2)  MatrixGenerics    * 1.6.0      2021-10-26 [1] Bioconductor  matrixStats       * 0.62.0     2022-04-19 [1] CRAN (R 4.1.2)  memoise             2.0.1      2021-11-26 [1] CRAN (R 4.1.2)  mgcv                1.8-38     2021-10-06 [2] CRAN (R 4.1.2)  mime                0.12       2021-09-28 [1] CRAN (R 4.1.2)  miniUI              0.1.1.1    2018-05-18 [1] CRAN (R 4.1.2)  munsell             0.5.0      2018-06-12 [1] CRAN (R 4.1.2)  nlme                3.1-153    2021-09-07 [2] CRAN (R 4.1.2)  parallelly          1.32.1     2022-07-21 [1] CRAN (R 4.1.2)  patchwork           1.1.1      2020-12-17 [1] CRAN (R 4.1.2)  pbapply             1.5-0      2021-09-16 [1] CRAN (R 4.1.2)  pillar              1.8.0      2022-07-18 [1] CRAN (R 4.1.2)  pkgbuild            1.3.1      2021-12-20 [1] CRAN (R 4.1.2)  pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.1.2)  pkgload             1.3.0      2022-06-27 [1] CRAN (R 4.1.2)  plotly              4.10.0     2021-10-09 [1] CRAN (R 4.1.2)  plyr                1.8.7      2022-03-24 [1] CRAN (R 4.1.2)  png                 0.1-7      2013-12-03 [1] CRAN (R 4.1.2)  polyclip            1.10-0     2019-03-14 [1] CRAN (R 4.1.2)  prettyunits         1.1.1      2020-01-24 [1] CRAN (R 4.1.2)  processx            3.7.0      2022-07-07 [1] CRAN (R 4.1.2)  profvis             0.3.7      2020-11-02 [1] CRAN (R 4.1.2)  progressr           0.10.1     2022-06-03 [1] CRAN (R 4.1.2)  promises            1.2.0.1    2021-02-11 [1] CRAN (R 4.1.2)  ps                  1.7.0      2022-04-23 [1] CRAN (R 4.1.2)  purrr               0.3.4      2020-04-17 [1] CRAN (R 4.1.2)  quadprog          * 1.5-8      2019-11-20 [1] CRAN (R 4.1.2)  R6                  2.5.1      2021-08-19 [1] CRAN (R 4.1.2)  RANN              * 2.6.1      2019-01-08 [1] CRAN (R 4.1.2)  RColorBrewer      * 1.1-3      2022-04-03 [1] CRAN (R 4.1.2)  Rcpp                1.0.9      2022-07-08 [1] CRAN (R 4.1.2)  RcppAnnoy           0.0.19     2021-07-30 [1] CRAN (R 4.1.2)  remotes             2.4.2      2021-11-30 [1] CRAN (R 4.1.2)  reshape2            1.4.4      2020-04-09 [1] CRAN (R 4.1.2)  reticulate          1.25       2022-05-11 [1] CRAN (R 4.1.2)  rgeos               0.5-9      2021-12-15 [1] CRAN (R 4.1.2)  rlang               1.0.4      2022-07-12 [1] CRAN (R 4.1.2)  ROCR                1.0-11     2020-05-02 [1] CRAN (R 4.1.2)  rpart               4.1-15     2019-04-12 [2] CRAN (R 4.1.2)  RSpectra          * 0.16-1     2022-04-24 [1] CRAN (R 4.1.2)  Rtsne               0.16       2022-04-17 [1] CRAN (R 4.1.2)  scales            * 1.2.0      2022-04-13 [1] CRAN (R 4.1.2)  scattermore         0.8        2022-02-14 [1] CRAN (R 4.1.2)  sctransform         0.3.3      2022-01-13 [1] CRAN (R 4.1.2)  sessioninfo         1.2.2      2021-12-06 [1] CRAN (R 4.1.2)  Seurat            * 4.1.1      2022-05-02 [1] CRAN (R 4.1.2)  SeuratObject      * 4.1.0      2022-05-01 [1] CRAN (R 4.1.2)  shiny               1.7.2      2022-07-19 [1] CRAN (R 4.1.2)  sp                * 1.5-0      2022-06-05 [1] CRAN (R 4.1.2)  sparseMatrixStats * 1.6.0      2021-10-26 [1] Bioconductor  spatstat.core       2.4-2      2022-04-01 [1] CRAN (R 4.1.2)  spatstat.data       2.2-0      2022-04-18 [1] CRAN (R 4.1.2)  spatstat.geom       2.4-0      2022-03-29 [1] CRAN (R 4.1.2)  spatstat.random     2.2-0      2022-03-30 [1] CRAN (R 4.1.2)  spatstat.sparse     2.1-1      2022-04-18 [1] CRAN (R 4.1.2)  spatstat.utils      2.3-1      2022-05-06 [1] CRAN (R 4.1.2)  stringi             1.7.8      2022-07-11 [1] CRAN (R 4.1.2)  stringr             1.4.0      2019-02-10 [1] CRAN (R 4.1.2)  survival            3.2-13     2021-08-24 [2] CRAN (R 4.1.2)  tensor              1.5        2012-05-05 [1] CRAN (R 4.1.2)  testthat          * 3.1.4      2022-04-26 [1] CRAN (R 4.1.2)  tibble              3.1.8      2022-07-22 [1] CRAN (R 4.1.2)  tidyr               1.2.0      2022-02-01 [1] CRAN (R 4.1.2)  tidyselect          1.1.2      2022-02-21 [1] CRAN (R 4.1.2)  tiltedCCA         * 1.0.0.001  2022-09-06 [1] local  urlchecker          1.0.1      2021-11-30 [1] CRAN (R 4.1.2)  usethis             2.1.6      2022-05-25 [1] CRAN (R 4.1.2)  utf8                1.2.2      2021-07-24 [1] CRAN (R 4.1.2)  uwot                0.1.13     2022-08-16 [1] CRAN (R 4.1.2)  vctrs               0.4.1      2022-04-13 [1] CRAN (R 4.1.2)  viridisLite         0.4.0      2021-04-13 [1] CRAN (R 4.1.2)  withr               2.5.0      2022-03-03 [1] CRAN (R 4.1.2)  xtable              1.8-4      2019-04-21 [1] CRAN (R 4.1.2)  zoo                 1.8-10     2022-04-15 [1] CRAN (R 4.1.2)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/compute_snns.html","id":null,"dir":"Reference","previous_headings":"","what":"Include SNN graphs to multiSVD — compute_snns","title":"Include SNN graphs to multiSVD — compute_snns","text":"Computing including shared nearest-neighbor (SNN) graphs  modality target common manifold existing multiSVD object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/compute_snns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include SNN graphs to multiSVD — compute_snns","text":"","code":"compute_snns(   input_obj,   latent_k,   num_neigh,   bool_cosine = T,   bool_intersect = T,   min_deg = 1,   tol = 1e-04,   verbose = 0 )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/compute_snns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include SNN graphs to multiSVD — compute_snns","text":"input_obj multiSVD class, creation via create_multiSVD() form_metacells() latent_k number latent dimensions graph Laplacian bases num_neigh number neighbors cell, constructing SNN graphs bool_cosine boolean, using cosine distance T Euclidean distance F bool_intersect boolean, whether symmetrize (via function) SNN min_deg minimum degree cell SNN tol small positive number verbose non-negative integer","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/compute_snns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Include SNN graphs to multiSVD — compute_snns","text":"updated multiSVD object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/consensus_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing Consensus PCA — consensus_pca","title":"Computing Consensus PCA — consensus_pca","text":"Computing Consensus PCA","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/consensus_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing Consensus PCA — consensus_pca","text":"","code":"consensus_pca(   mat_1,   mat_2,   dims_1,   dims_2,   dims_consensus,   apply_pca = T,   center_1 = T,   center_2 = T,   center_consensus = T,   normalize_row = F,   normalize_singular_value = T,   recenter_1 = F,   recenter_2 = F,   recenter_consensus = F,   rescale_1 = F,   rescale_2 = F,   rescale_consensus = F,   scale_1 = T,   scale_2 = T,   scale_consensus = T,   scale_max_1 = NULL,   scale_max_2 = NULL,   scale_max_consensus = NULL,   svd_1 = NULL,   svd_2 = NULL,   tol = 0.001,   verbose = 0 )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/consensus_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing Consensus PCA — consensus_pca","text":"mat_1 data matrix n cells p1 features Modality 1 mat_2 data matrix n cells p2 features Modality 2 dims_1 vector latent dimensions mat_1 used analysis dims_2 vector latent dimensions mat_2 used analysis dims_consensus vector latent dimensions Consensus PCA apply_pca boolean, PCA combined set latent dimensions (modalities) T F center_1 boolean, center feature Modality 1 prior computing latent dimensions center_2 boolean, center feature Modality 2 prior computing latent dimensions center_consensus boolean, center combined set latent dimensions (modalities) normalize_row boolean, normalize cell's latent vector dimension-reduction modalities normalize_singular_value boolean, normalize modality largest singular value recenter_1 boolean, center latent dimension Modality 1 computing latent dimensions recenter_2 boolean, center latent dimension Modality 2 computing latent dimensions recenter_consensus boolean, center latent dimension Consensus PCA rescale_1 boolean, rescale latent dimension Modality 1 computing latent dimensions rescale_2 boolean, rescale latent dimension Modality 2 computing latent dimensions rescale_consensus boolean, rescale latent dimension Consensus PCA scale_1 boolean, rescale feature Modality 1 prior computing latent dimensions scale_2 boolean, rescale feature Modality 2 prior computing latent dimensions scale_consensus boolean, rescale combined set latent dimensions (modalities) scale_max_1 numeric NULL, threshold Modality 1 magnitude prior computing latent dimensions scale_max_2 numeric NULL, threshold Modality 2 magnitude prior computing latent dimensions scale_max_consensus numeric NULL, threshold combined set latent dimensions magnitude prior computing latent dimensions svd_1 list u, d, v SVD Modality 1 already computed svd_2 list u, d, v SVD Modality 2 already computed tol small positive number verbose non-negative integer","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/consensus_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing Consensus PCA — consensus_pca","text":"consensusPCA object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/construct_celltype_subsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct cell-type subsamples — construct_celltype_subsample","title":"Construct cell-type subsamples — construct_celltype_subsample","text":"Sample min_subsample_cell cells unique level membership_vec","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/construct_celltype_subsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct cell-type subsamples — construct_celltype_subsample","text":"","code":"construct_celltype_subsample(membership_vec, min_subsample_cell)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/construct_celltype_subsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct cell-type subsamples — construct_celltype_subsample","text":"membership_vec factor vector min_subsample_cell positive integer","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/construct_celltype_subsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct cell-type subsamples — construct_celltype_subsample","text":"indices","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/create_multiSVD.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the object to initialize Tilted-CCA — create_multiSVD","title":"Create the object to initialize Tilted-CCA — create_multiSVD","text":"Initialize multiSVD object computing modality's SVD.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/create_multiSVD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the object to initialize Tilted-CCA — create_multiSVD","text":"","code":"create_multiSVD(   mat_1,   mat_2,   dims_1,   dims_2,   center_1 = T,   center_2 = T,   normalize_row = T,   normalize_singular_value = T,   recenter_1 = F,   recenter_2 = F,   rescale_1 = F,   rescale_2 = F,   scale_1 = T,   scale_2 = T,   scale_max_1 = NULL,   scale_max_2 = NULL,   verbose = 0 )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/create_multiSVD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the object to initialize Tilted-CCA — create_multiSVD","text":"mat_1 data matrix n cells p1 features Modality 1 mat_2 data matrix n cells p2 features Modality 2 dims_1 vector latent dimensions mat_1 used analysis dims_2 vector latent dimensions mat_2 used analysis center_1 boolean, center feature Modality 1 prior computing latent dimensions center_2 boolean, center feature Modality 2 prior computing latent dimensions normalize_row boolean, normalize cell's latent vector dimension-reduction modalities normalize_singular_value boolean, normalize modality largest singular value recenter_1 boolean, center latent dimension Modality 1 computing latent dimensions recenter_2 boolean, center latent dimension Modality 2 computing latent dimensions rescale_1 boolean, rescale latent dimension Modality 1 computing latent dimensions rescale_2 boolean, rescale latent dimension Modality 2 computing latent dimensions scale_1 boolean, rescale feature Modality 1 prior computing latent dimensions scale_2 boolean, rescale feature Modality 2 prior computing latent dimensions scale_max_1 numeric NULL, threshold Modality 1 magnitude prior computing latent dimensions scale_max_2 numeric NULL, threshold Modality 2 magnitude prior computing latent dimensions verbose non-negative integer","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/create_multiSVD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the object to initialize Tilted-CCA — create_multiSVD","text":"multiSVD object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-cca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform CCA — .cca","title":"Perform CCA — .cca","text":"function takes either two matrices two SVDs. input_1 input_2 must \"type.\" Calls .compute_cca_aggregate_matrix function.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-cca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform CCA — .cca","text":"","code":".cca(input_1, input_2, dims_1, dims_2, return_scores, tol = 1e-06)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-cca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform CCA — .cca","text":"input_1 first input input_2 second input dims_1 desired latent dimensions data matrix 1.  used input_1 matrix,  list representing SVD dims_2 desired latent dimensions data matrix 2. used input_2 matrix,  list representing SVD return_scores boolean. TRUE, return scores (.e., matrices rows cells). FALSE, return loadings (.e., matrices rows variables). Either way, one output matrices rank_1 columns another rank_2 columns tol small numeric","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-cca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform CCA — .cca","text":"list","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_cca_aggregate_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function with the CCA function — .compute_cca_aggregate_matrix","title":"Helper function with the CCA function — .compute_cca_aggregate_matrix","text":"Called .cca function. Recall computing CCA, main matrix need compute , roughly speaking,  half-inverse first covariance times cross-covariance matrix times half-inverse second covariance. SVD two original matrices, actually equivalent product left singular vectors.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_cca_aggregate_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function with the CCA function — .compute_cca_aggregate_matrix","text":"","code":".compute_cca_aggregate_matrix(svd_1, svd_2, augment)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_cca_aggregate_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function with the CCA function — .compute_cca_aggregate_matrix","text":"svd_1 SVD denoised variant mat_1 dcca_factor svd_2 SVD denoised variant mat_2 dcca_factor augment boolean. TRUE, augment matrix either rows columns 0's dimension output matrix matches svd_1 svd_2","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_cca_aggregate_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function with the CCA function — .compute_cca_aggregate_matrix","text":"matrix","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_distinct_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the distinct scores — .compute_distinct_score","title":"Compute the distinct scores — .compute_distinct_score","text":"Given score_1 score_2, already computed common_score, compute distinct scores. --less simple subtraction, need handle situations might need \"fill-extra dimensions\"","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_distinct_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the distinct scores — .compute_distinct_score","text":"","code":".compute_distinct_score(score_1, score_2, common_score)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_distinct_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the distinct scores — .compute_distinct_score","text":"score_1 matrix score_2 matrix common_score matrix","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_distinct_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the distinct scores — .compute_distinct_score","text":"list two matrices","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_prob_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probability matrix — .compute_prob_mat","title":"Compute probability matrix — .compute_prob_mat","text":"Compute probability matrix","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_prob_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probability matrix — .compute_prob_mat","text":"","code":".compute_prob_mat(B_mat, membership_vec)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_prob_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probability matrix — .compute_prob_mat","text":"B_mat symmetric connectivity matrix membership_vec vector containing values 1 ncol(B_mat)","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_prob_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probability matrix — .compute_prob_mat","text":"symmetric matrix dimension length(membership_vec)","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_unnormalized_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Using the CCA solution, compute the score matrices. — .compute_unnormalized_scores","title":"Using the CCA solution, compute the score matrices. — .compute_unnormalized_scores","text":"called .tiltedCCA_common_score. called unnormalized scores since n rows (.e., nrow(svd_1$u)), return matrices orthogonal matrices matrix multiplied diagonal matrix values n.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_unnormalized_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Using the CCA solution, compute the score matrices. — .compute_unnormalized_scores","text":"","code":".compute_unnormalized_scores(svd_1, svd_2, cca_res)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_unnormalized_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Using the CCA solution, compute the score matrices. — .compute_unnormalized_scores","text":"svd_1 SVD denoised variant mat_1 dcca_factor svd_2 SVD denoised variant mat_2 dcca_factor cca_res returned object .cca","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-compute_unnormalized_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Using the CCA solution, compute the score matrices. — .compute_unnormalized_scores","text":"list two matrices","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-generate_adjaceny_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate adjacency matrix — .generate_adjaceny_mat","title":"Simulate adjacency matrix — .generate_adjaceny_mat","text":"matrix symmetric.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-generate_adjaceny_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate adjacency matrix — .generate_adjaceny_mat","text":"","code":".generate_adjaceny_mat(prob_mat)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-generate_adjaceny_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate adjacency matrix — .generate_adjaceny_mat","text":"prob_mat probability matrix","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-generate_adjaceny_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate adjacency matrix — .generate_adjaceny_mat","text":"adjacency matrix","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-project_vec2vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection of vector onto another vector — .project_vec2vec","title":"Projection of vector onto another vector — .project_vec2vec","text":"Returns component vec1 orthogonal vec2 orthogonal TRUE, component vec1 parallel vec2  orthogonal FALSE.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-project_vec2vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection of vector onto another vector — .project_vec2vec","text":"","code":".project_vec2vec(vec1, vec2, orthogonal, tol = 1e-06)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-project_vec2vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection of vector onto another vector — .project_vec2vec","text":"vec1 vector vec2 vector orthogonal boolean tol small positive number","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-project_vec2vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projection of vector onto another vector — .project_vec2vec","text":"vector","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-tiltedCCA_common_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Main workhorse of dcca_factor — .tiltedCCA_common_score","title":"Main workhorse of dcca_factor — .tiltedCCA_common_score","text":"Given two matrices (given svd_1 svd_2) CCA solution cca_res, compute common scores. calls functions .common_decomposition .compute_distinct_score.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-tiltedCCA_common_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main workhorse of dcca_factor — .tiltedCCA_common_score","text":"","code":".tiltedCCA_common_score(   averaging_mat,   cca_res,   discretization_gridsize,   enforce_boundary,   fix_tilt_perc,   snn_bool_cosine,   snn_bool_intersect,   snn_k,   snn_min_deg,   snn_num_neigh,   svd_1,   svd_2,   target_dimred,   verbose = 0 )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-tiltedCCA_common_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main workhorse of dcca_factor — .tiltedCCA_common_score","text":"averaging_mat sparse matrix cca_res returned object .cca discretization_gridsize positive integer many values 0 1 (inclusive) search  appropriate amount tilt enforce_boundary boolean, whether tilt required stay two canonical score vectors fix_tilt_perc boolean numeric. FALSE, tilt adaptively determined, TRUE, tilt set equal  0.5. numeric, value 0 1, tilt set . snn_bool_cosine boolean snn_bool_intersect boolean snn_k integer snn_min_deg integer snn_num_neigh integer svd_1 SVD denoised variant mat_1 dcca_factor svd_2 SVD denoised variant mat_2 dcca_factor target_dimred matrix verbose non-negative integer","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/dot-tiltedCCA_common_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main workhorse of dcca_factor — .tiltedCCA_common_score","text":"list","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/fine_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Fine tune the common tilts, one for each latent dimension — fine_tuning","title":"Fine tune the common tilts, one for each latent dimension — fine_tuning","text":"Tune latent dimension (representing pair canonical score vectors) appropriate tilt common component","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/fine_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fine tune the common tilts, one for each latent dimension — fine_tuning","text":"","code":"fine_tuning(   input_obj,   max_iter = 5,   fix_tilt_perc = NA,   temp_path = NULL,   tol = 1e-05,   verbose = 0 )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/fine_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fine tune the common tilts, one for each latent dimension — fine_tuning","text":"input_obj multiSVD class, creation via tiltedCCA() max_iter maximum number epochs (.e., cycling latent dimensions) fix_tilt_perc scalar 0 1, NA, setting tilts latent dimension scalar NA temp_path filepath saving temporary progress tol small positive number verbose non-negative integer","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/fine_tuning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fine tune the common tilts, one for each latent dimension — fine_tuning","text":"updated multiSVD object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/form_metacells.html","id":null,"dir":"Reference","previous_headings":"","what":"Include meta-cell information to multiSVD — form_metacells","title":"Include meta-cell information to multiSVD — form_metacells","text":"Include hard clustering information compute meta-cells  existing  multiSVD object.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/form_metacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include meta-cell information to multiSVD — form_metacells","text":"","code":"form_metacells(   input_obj,   large_clustering_1,   large_clustering_2,   num_metacells = NULL,   min_size = 5,   verbose = 0 )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/form_metacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include meta-cell information to multiSVD — form_metacells","text":"input_obj multiSVD class, creation via create_multiSVD() large_clustering_1 factor among n cells NULL, representing hard clustering structure Modality 1 large_clustering_2 factor among n cells NULL, representing hard clustering structure Modality 2 num_metacells number desired meta-cells min_size smallest number cells meta-cell verbose non-negative integer","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/form_metacells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Include meta-cell information to multiSVD — form_metacells","text":"updated multiSVD object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/generate_random_orthogonal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate orthogonal matrices via Gaussian noise — generate_random_orthogonal","title":"Generate orthogonal matrices via Gaussian noise — generate_random_orthogonal","text":"Generate orthogonal matrices via Gaussian noise","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/generate_random_orthogonal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate orthogonal matrices via Gaussian noise — generate_random_orthogonal","text":"","code":"generate_random_orthogonal(n, K, centered = F)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/generate_random_orthogonal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate orthogonal matrices via Gaussian noise — generate_random_orthogonal","text":"n integer K integer centered boolean, TRUE, one less dimension provided singular vectors centered","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/generate_random_orthogonal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate orthogonal matrices via Gaussian noise — generate_random_orthogonal","text":"matrix","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/generate_sbm_orthogonal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate orthogonal matrices correspond to an SBM — generate_sbm_orthogonal","title":"Generate orthogonal matrices correspond to an SBM — generate_sbm_orthogonal","text":"Generate orthogonal matrices correspond SBM","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/generate_sbm_orthogonal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate orthogonal matrices correspond to an SBM — generate_sbm_orthogonal","text":"","code":"generate_sbm_orthogonal(B_mat, membership_vec, centered = T)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/generate_sbm_orthogonal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate orthogonal matrices correspond to an SBM — generate_sbm_orthogonal","text":"B_mat symmetric matrix membership_vec vector positive integers centered boolean, TRUE, one less dimension provided singular vectors centered","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/generate_sbm_orthogonal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate orthogonal matrices correspond to an SBM — generate_sbm_orthogonal","text":"matrix","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_clisi.html","id":null,"dir":"Reference","previous_headings":"","what":"Making the plot for local enrichment — plot_clisi","title":"Making the plot for local enrichment — plot_clisi","text":"Making plot local enrichment","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_clisi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making the plot for local enrichment — plot_clisi","text":"","code":"plot_clisi(   local_1,   local_2,   col_vec = (scales::hue_pal())(nrow(local_1$common_clisi$membership_info)),   l_bg = 75,   c_bg = 50,   alpha_bg = 0.5,   xlab1 = \"Distinct enrichment\",   xlab2 = \"Distinct enrichment\",   ylab = \"Common enrichment\",   main1 = \"Modality 1\",   main2 = \"Modality 2\",   ... )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_clisi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Making the plot for local enrichment — plot_clisi","text":"local_1 output clisi_information one Modality local_2 output clisi_information Modality col_vec vector colors l_bg l parameter (luminosity, .e., brightness) individual cells c_bg c parameter (chroma, .e., color intensity) individual cells alpha_bg alpha parameter (color) individual cells xlab1 xlab Modality 1 xlab2 xlab Modality 2 ylab ylab shared modality main1 Title plot corresponding Modality 1 main2 Title plot corresponding Modality 2 ... extra parameters ggrepel::geom_text_repel","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_clisi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Making the plot for local enrichment — plot_clisi","text":"List two gg objects","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_clisi_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the cLISI legend — plot_clisi_legend","title":"Plot the cLISI legend — plot_clisi_legend","text":"Plot cLISI legend","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_clisi_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the cLISI legend — plot_clisi_legend","text":"","code":"plot_clisi_legend(   clisi_obj,   col_vec = (scales::hue_pal())(nrow(clisi_obj$common_clisi$membership_info)),   percent_coverage = 1,   pch = 16,   cex_point = 1,   cex_text = 1,   text_nudge = 0,   xlim = c(0, 1),   ... )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_clisi_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the cLISI legend — plot_clisi_legend","text":"clisi_obj output clisi_information col_vec vector colors percent_coverage numeric pch pch parameter cex_point cex parameter points cex_text cex parameter text text_nudge x-axis offset text xlim xlim parameter plot ... additional graphical parameters","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_clisi_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the cLISI legend — plot_clisi_legend","text":"nothing","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_heatmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of the data — plot_heatmat","title":"Heatmap of the data — plot_heatmat","text":"reserve_zero = T, reserve zero white. reserve_zero = F, greens negative reds positive","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_heatmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of the data — plot_heatmat","text":"","code":"plot_heatmat(   dat,   luminosity = F,   asp = nrow(dat)/ncol(dat),   reserve_zero = T,   ... )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_heatmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of the data — plot_heatmat","text":"dat matrix luminosity boolean asp numeric reserve_zero boolean ... additional graphical parameters","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_heatmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of the data — plot_heatmat","text":"shows plot returns nothing","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Side-by-side plot of the canonical scores, colored by membership — plot_scores","title":"Side-by-side plot of the canonical scores, colored by membership — plot_scores","text":"Side--side plot canonical scores, colored membership","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Side-by-side plot of the canonical scores, colored by membership — plot_scores","text":"","code":"plot_scores(   obj,   membership_vec,   col_vec = (scales::hue_pal())(length(levels(membership_vec))),   xlim = NA,   decomposition = F )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Side-by-side plot of the canonical scores, colored by membership — plot_scores","text":"obj output either generate_data dcca_decomposition membership_vec factor vector col_vec vector colors xlim custom xlim graphical argument decomposition boolean","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Side-by-side plot of the canonical scores, colored by membership — plot_scores","text":"shows plot returns nothing","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores_heatmap.dcca.html","id":null,"dir":"Reference","previous_headings":"","what":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.dcca","title":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.dcca","text":"Side--side plot canonical scores heatmaps","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores_heatmap.dcca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.dcca","text":"","code":"plot_scores_heatmap.dcca(   obj,   main_vec = c(\"Common score\", \"Distinct score 1\", \"Distinct score 2\"),   membership_vec = NA,   num_col = 10,   log_scale = F,   scaling_power = 1,   luminosity = F )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores_heatmap.dcca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.dcca","text":"obj output either generate_data dcca_decomposition main_vec vector characters title plots membership_vec factor vector num_col positive integers number distinct colors log_scale boolean scaling_power positive numeric luminosity boolean","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores_heatmap.dcca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.dcca","text":"shows plot returns nothing","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores_heatmap.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.list","title":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.list","text":"Side--side plot canonical scores heatmaps","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores_heatmap.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.list","text":"","code":"plot_scores_heatmap.list(   obj,   main_vec = NA,   membership_vec = NA,   num_col = 10,   log_scale = F,   scaling_power = 1,   luminosity = F )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores_heatmap.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.list","text":"obj list main_vec vector characters title plots membership_vec factor vector num_col positive integers number distinct colors log_scale boolean scaling_power positive numeric luminosity boolean","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_scores_heatmap.list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Side-by-side plot of the canonical scores as heatmaps — plot_scores_heatmap.list","text":"shows plot returns nothing","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summary of D-CCA — plot_summary","title":"Plot summary of D-CCA — plot_summary","text":"Plot summary D-CCA","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summary of D-CCA — plot_summary","text":"","code":"plot_summary(   obj,   xlab = \"Latent dimension\",   ylab1 = \"CCA objective\",   ylab2 = \"Distinct % for Modality 2\",   main = \"\",   pch = 16,   cex = 1,   lwd = 1,   ... )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summary of D-CCA — plot_summary","text":"obj output dcca_decomposition xlab xlab graphical parameter ylab1 ylab graphical parameter left axis ylab2 ylab graphical parameter right axis main main graphical parameter pch pch graphical parameter cex cex graphical parameter lwd lwd graphical parameter ... additional graphical parameter","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/plot_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summary of D-CCA — plot_summary","text":"shows plot returns nothing","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing cell enrichments for matrix object — postprocess_cell_enrichment.default","title":"Computing cell enrichments for matrix object — postprocess_cell_enrichment.default","text":"Computing cell enrichments matrix object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing cell enrichments for matrix object — postprocess_cell_enrichment.default","text":"","code":"# S3 method for default postprocess_cell_enrichment(   input_obj,   membership_vec,   num_neigh,   bool_cosine = T,   bool_intersect = T,   max_subsample = min(1000, length(membership_vec)),   min_deg = 1,   verbose = 0,   ... )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing cell enrichments for matrix object — postprocess_cell_enrichment.default","text":"input_obj matrix n cells p variable membership_vec factor vector length number cells multiSVD, denoting cell-types cell num_neigh number nearest neighbors bool_cosine boolean, using cosine distance T Euclidean distance F bool_intersect boolean, whether symmetrize (via function) SNN max_subsample maximum cells sample cell-type. max_subsample cells cell-type (dictated membership_vec), random subset cells selected sake function min_deg minimum degree cell SNN verbose non-negative integer ... additional arguments","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing cell enrichments (generic) — postprocess_cell_enrichment","title":"Computing cell enrichments (generic) — postprocess_cell_enrichment","text":"Computing cell enrichments (generic)","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing cell enrichments (generic) — postprocess_cell_enrichment","text":"","code":"postprocess_cell_enrichment(input_obj, ...)"},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing cell enrichments (generic) — postprocess_cell_enrichment","text":"input_obj multiSVD object, using tiltedCCA_decomposition() ... Additional arguments","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.multiSVD.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing cell enrichments for multiSVD object — postprocess_cell_enrichment.multiSVD","title":"Computing cell enrichments for multiSVD object — postprocess_cell_enrichment.multiSVD","text":"Computing cell enrichments multiSVD object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.multiSVD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing cell enrichments for multiSVD object — postprocess_cell_enrichment.multiSVD","text":"","code":"# S3 method for multiSVD postprocess_cell_enrichment(   input_obj,   membership_vec,   max_subsample = min(1000, length(membership_vec)),   verbose = 0,   ... )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/postprocess_cell_enrichment.multiSVD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing cell enrichments for multiSVD object — postprocess_cell_enrichment.multiSVD","text":"input_obj multiSVD object, using tiltedCCA_decomposition() membership_vec factor vector length number cells multiSVD, denoting cell-types cell max_subsample maximum cells sample cell-type. max_subsample cells cell-type (dictated membership_vec), random subset cells selected sake function verbose non-negative integer ... additional arguments","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/tiltedCCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Tilted-CCA Factorization — tiltedCCA","title":"Tilted-CCA Factorization — tiltedCCA","text":"Computing common-distinct decomposition via CCA, setting latent dimension common tilt.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/tiltedCCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tilted-CCA Factorization — tiltedCCA","text":"","code":"tiltedCCA(   input_obj,   discretization_gridsize = 21,   enforce_boundary = F,   fix_tilt_perc = F,   verbose = 0 )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/tiltedCCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tilted-CCA Factorization — tiltedCCA","text":"input_obj multiSVD class, creation via compute_snns() discretization_gridsize positive integer many values 0 1 (inclusive) search  appropriate amount tilt enforce_boundary boolean, whether tilt required stay two canonical score vectors fix_tilt_perc boolean numeric. FALSE, tilt adaptively determined, TRUE, tilt set equal  0.5. numeric, value 0 1, tilt set . verbose non-negative integer tilt values (possibly set fix_tilt_perc), values close 0 1 means common space resembles  canonical scores mat_2 mat_1 respectively.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/tiltedCCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tilted-CCA Factorization — tiltedCCA","text":"updated multiSVD object","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/tiltedCCA_decomposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Tilted-CCA Decomposition — tiltedCCA_decomposition","title":"Tilted-CCA Decomposition — tiltedCCA_decomposition","text":"computing appropriate tilts, recover full decomposition modalities.","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/tiltedCCA_decomposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tilted-CCA Decomposition — tiltedCCA_decomposition","text":"","code":"tiltedCCA_decomposition(   input_obj,   bool_modality_1_full = T,   bool_modality_2_full = T,   verbose = 0 )"},{"path":"https://linnykos.github.io/tiltedCCA/reference/tiltedCCA_decomposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tilted-CCA Decomposition — tiltedCCA_decomposition","text":"input_obj multiSVD class, creation via tiltedCCA() fine_tuning() bool_modality_1_full boolean, compute full-matrix decomposition Modality 1 T low-dimensional representation F bool_modality_2_full boolean, compute full-matrix decomposition Modality 2 T low-dimensional representation F verbose non-negative integer","code":""},{"path":"https://linnykos.github.io/tiltedCCA/reference/tiltedCCA_decomposition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tilted-CCA Decomposition — tiltedCCA_decomposition","text":"updated multiSVD object","code":""}]
